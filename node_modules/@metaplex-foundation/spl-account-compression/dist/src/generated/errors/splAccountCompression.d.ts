/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Program, ProgramError } from '@metaplex-foundation/umi';
/** IncorrectLeafLength: Incorrect leaf length. Expected vec of 32 bytes */
export declare class IncorrectLeafLengthError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** ConcurrentMerkleTreeError: Concurrent merkle tree error */
export declare class ConcurrentMerkleTreeErrorError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** ZeroCopyError: Issue zero copying concurrent merkle tree data */
export declare class ZeroCopyErrorError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** ConcurrentMerkleTreeConstantsError: An unsupported max depth or max buffer size constant was provided */
export declare class ConcurrentMerkleTreeConstantsErrorError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** CanopyLengthMismatch: Expected a different byte length for the merkle tree canopy */
export declare class CanopyLengthMismatchError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** IncorrectAuthority: Provided authority does not match expected tree authority */
export declare class IncorrectAuthorityError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** IncorrectAccountOwner: Account is owned by a different program, expected it to be owned by this program */
export declare class IncorrectAccountOwnerError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** IncorrectAccountType: Account provided has incorrect account type */
export declare class IncorrectAccountTypeError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** LeafIndexOutOfBounds: Leaf index of concurrent merkle tree is out of bounds */
export declare class LeafIndexOutOfBoundsError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export declare function getSplAccountCompressionErrorFromCode(code: number, program: Program, cause?: Error): ProgramError | null;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export declare function getSplAccountCompressionErrorFromName(name: string, program: Program, cause?: Error): ProgramError | null;
