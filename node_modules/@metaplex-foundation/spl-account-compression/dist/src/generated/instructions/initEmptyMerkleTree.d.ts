/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export declare type InitEmptyMerkleTreeInstructionAccounts = {
    merkleTree: PublicKey | Pda;
    /**
     * Authority that controls write-access to the tree
     * Typically a program, e.g., the Bubblegum contract validates that leaves are valid NFTs.
     */
    authority?: Signer;
    /** Program used to emit changelogs as cpi instruction data. */
    noop: PublicKey | Pda;
};
export declare type InitEmptyMerkleTreeInstructionData = {
    discriminator: Array<number>;
    maxDepth: number;
    maxBufferSize: number;
};
export declare type InitEmptyMerkleTreeInstructionDataArgs = {
    maxDepth: number;
    maxBufferSize: number;
};
export declare function getInitEmptyMerkleTreeInstructionDataSerializer(): Serializer<InitEmptyMerkleTreeInstructionDataArgs, InitEmptyMerkleTreeInstructionData>;
export declare type InitEmptyMerkleTreeInstructionArgs = InitEmptyMerkleTreeInstructionDataArgs;
export declare function initEmptyMerkleTree(context: Pick<Context, 'identity' | 'programs'>, input: InitEmptyMerkleTreeInstructionAccounts & InitEmptyMerkleTreeInstructionArgs): TransactionBuilder;
