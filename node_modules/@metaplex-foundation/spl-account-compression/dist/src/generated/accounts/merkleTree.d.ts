/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { MerkleTreeAccountData } from '../../hooked';
import { CompressionAccountTypeArgs, ConcurrentMerkleTreeHeaderDataArgs } from '../types';
export declare type MerkleTree = Account<MerkleTreeAccountData>;
export declare function deserializeMerkleTree(rawAccount: RpcAccount): MerkleTree;
export declare function fetchMerkleTree(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<MerkleTree>;
export declare function safeFetchMerkleTree(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<MerkleTree | null>;
export declare function fetchAllMerkleTree(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<MerkleTree[]>;
export declare function safeFetchAllMerkleTree(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<MerkleTree[]>;
export declare function getMerkleTreeGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<MerkleTree, {
    discriminator: CompressionAccountTypeArgs;
    treeHeader: ConcurrentMerkleTreeHeaderDataArgs;
    serializedTree: Uint8Array;
}>;
