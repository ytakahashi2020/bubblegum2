"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMerkleTreeGpaBuilder = exports.safeFetchAllMerkleTree = exports.fetchAllMerkleTree = exports.safeFetchMerkleTree = exports.fetchMerkleTree = exports.deserializeMerkleTree = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const hooked_1 = require("../../hooked");
const types_1 = require("../types");
function deserializeMerkleTree(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, (0, hooked_1.getMerkleTreeAccountDataSerializer)());
}
exports.deserializeMerkleTree = deserializeMerkleTree;
async function fetchMerkleTree(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'MerkleTree');
    return deserializeMerkleTree(maybeAccount);
}
exports.fetchMerkleTree = fetchMerkleTree;
async function safeFetchMerkleTree(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeMerkleTree(maybeAccount) : null;
}
exports.safeFetchMerkleTree = safeFetchMerkleTree;
async function fetchAllMerkleTree(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'MerkleTree');
        return deserializeMerkleTree(maybeAccount);
    });
}
exports.fetchAllMerkleTree = fetchAllMerkleTree;
async function safeFetchAllMerkleTree(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeMerkleTree(maybeAccount));
}
exports.safeFetchAllMerkleTree = safeFetchAllMerkleTree;
function getMerkleTreeGpaBuilder(context) {
    const programId = context.programs.getPublicKey('splAccountCompression', 'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, types_1.getCompressionAccountTypeSerializer)()],
        treeHeader: [1, (0, types_1.getConcurrentMerkleTreeHeaderDataSerializer)()],
        serializedTree: [56, (0, serializers_1.bytes)()],
    })
        .deserializeUsing((account) => deserializeMerkleTree(account));
}
exports.getMerkleTreeGpaBuilder = getMerkleTreeGpaBuilder;
//# sourceMappingURL=merkleTree.js.map