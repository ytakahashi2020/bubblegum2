"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isConcurrentMerkleTreeHeaderData = exports.concurrentMerkleTreeHeaderData = exports.getConcurrentMerkleTreeHeaderDataSerializer = void 0;
const serializers_1 = require("@metaplex-foundation/umi/serializers");
function getConcurrentMerkleTreeHeaderDataSerializer() {
    return (0, serializers_1.dataEnum)([
        [
            'V1',
            (0, serializers_1.struct)([
                ['maxBufferSize', (0, serializers_1.u32)()],
                ['maxDepth', (0, serializers_1.u32)()],
                ['authority', (0, serializers_1.publicKey)()],
                ['creationSlot', (0, serializers_1.u64)()],
                ['padding', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 6 })],
            ]),
        ],
    ], { description: 'ConcurrentMerkleTreeHeaderData' });
}
exports.getConcurrentMerkleTreeHeaderDataSerializer = getConcurrentMerkleTreeHeaderDataSerializer;
function concurrentMerkleTreeHeaderData(kind, data) {
    return Array.isArray(data)
        ? { __kind: kind, fields: data }
        : { __kind: kind, ...(data ?? {}) };
}
exports.concurrentMerkleTreeHeaderData = concurrentMerkleTreeHeaderData;
function isConcurrentMerkleTreeHeaderData(kind, value) {
    return value.__kind === kind;
}
exports.isConcurrentMerkleTreeHeaderData = isConcurrentMerkleTreeHeaderData;
//# sourceMappingURL=concurrentMerkleTreeHeaderData.js.map