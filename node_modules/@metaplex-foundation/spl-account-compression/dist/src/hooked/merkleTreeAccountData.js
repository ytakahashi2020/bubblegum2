"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMerkleTreeSize = exports.getMerkleTreeAccountDataV1Serializer = exports.getMerkleTreeAccountDataSerializer = void 0;
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const concurrentMerkleTree_1 = require("./concurrentMerkleTree");
const __1 = require("..");
const getMerkleTreeAccountDataSerializer = () => {
    const headerSerializer = (0, __1.getConcurrentMerkleTreeHeaderSerializer)();
    return {
        description: 'MerkleTreeAccountData',
        fixedSize: null,
        maxSize: null,
        serialize: (value) => {
            switch (value.treeHeader.__kind) {
                case 'V1':
                    return (0, exports.getMerkleTreeAccountDataV1Serializer)(value.treeHeader.maxDepth, value.treeHeader.maxBufferSize).serialize(value);
                default:
                    throw new Error(`Unknown MerkleTreeAccountData version: ${value.treeHeader.__kind}`);
            }
        },
        deserialize: (bytes, offset = 0) => {
            const { header } = headerSerializer.deserialize(bytes, offset)[0];
            switch (header.__kind) {
                case 'V1':
                    return (0, exports.getMerkleTreeAccountDataV1Serializer)(header.maxDepth, header.maxBufferSize).deserialize(bytes, offset);
                default:
                    throw new Error(`Unknown MerkleTreeAccountData version: ${header.__kind}`);
            }
        },
    };
};
exports.getMerkleTreeAccountDataSerializer = getMerkleTreeAccountDataSerializer;
const getMerkleTreeAccountDataV1Serializer = (maxDepth, maxBufferSize) => (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
    ['discriminator', (0, serializers_1.u8)()],
    ['treeHeader', (0, __1.getConcurrentMerkleTreeHeaderDataSerializer)()],
    ['tree', (0, concurrentMerkleTree_1.getConcurrentMerkleTreeSerializer)(maxDepth, maxBufferSize)],
    ['canopy', (0, serializers_1.array)((0, serializers_1.publicKey)(), { size: 'remainder' })],
]), (value) => ({
    ...value,
    discriminator: __1.CompressionAccountType.ConcurrentMerkleTree,
}));
exports.getMerkleTreeAccountDataV1Serializer = getMerkleTreeAccountDataV1Serializer;
const getMerkleTreeSize = (maxDepth, maxBufferSize, canopyDepth = 0) => {
    const discriminatorSize = 1;
    const headerSize = (0, __1.getConcurrentMerkleTreeHeaderDataSerializer)()
        .fixedSize;
    const treeSize = (0, concurrentMerkleTree_1.getConcurrentMerkleTreeSerializer)(maxDepth, maxBufferSize)
        .fixedSize;
    // eslint-disable-next-line no-bitwise
    const canopySize = 32 * Math.max((1 << (canopyDepth + 1)) - 2, 0);
    return discriminatorSize + headerSize + treeSize + canopySize;
};
exports.getMerkleTreeSize = getMerkleTreeSize;
//# sourceMappingURL=merkleTreeAccountData.js.map