"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMplAccountCompressionProgramId = exports.getMplAccountCompressionProgram = exports.createMplAccountCompressionProgram = exports.MPL_ACCOUNT_COMPRESSION_PROGRAM_ID = void 0;
const errors_1 = require("../errors");
exports.MPL_ACCOUNT_COMPRESSION_PROGRAM_ID = 'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW';
function createMplAccountCompressionProgram() {
    return {
        name: 'mplAccountCompression',
        publicKey: exports.MPL_ACCOUNT_COMPRESSION_PROGRAM_ID,
        getErrorFromCode(code, cause) {
            return (0, errors_1.getMplAccountCompressionErrorFromCode)(code, this, cause);
        },
        getErrorFromName(name, cause) {
            return (0, errors_1.getMplAccountCompressionErrorFromName)(name, this, cause);
        },
        isOnCluster() {
            return true;
        },
    };
}
exports.createMplAccountCompressionProgram = createMplAccountCompressionProgram;
function getMplAccountCompressionProgram(context, clusterFilter) {
    return context.programs.get('mplAccountCompression', clusterFilter);
}
exports.getMplAccountCompressionProgram = getMplAccountCompressionProgram;
function getMplAccountCompressionProgramId(context, clusterFilter) {
    return context.programs.getPublicKey('mplAccountCompression', exports.MPL_ACCOUNT_COMPRESSION_PROGRAM_ID, clusterFilter);
}
exports.getMplAccountCompressionProgramId = getMplAccountCompressionProgramId;
//# sourceMappingURL=mplAccountCompression.js.map