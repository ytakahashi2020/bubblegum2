/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { PickPartial } from '../shared';
export declare type VerifyLeafInstructionAccounts = {
    merkleTree: PublicKey | Pda;
};
export declare type VerifyLeafInstructionData = {
    discriminator: Array<number>;
    root: Uint8Array;
    leaf: Uint8Array;
    index: number;
};
export declare type VerifyLeafInstructionDataArgs = {
    root: Uint8Array;
    leaf: Uint8Array;
    index: number;
};
export declare function getVerifyLeafInstructionDataSerializer(): Serializer<VerifyLeafInstructionDataArgs, VerifyLeafInstructionData>;
export declare type VerifyLeafInstructionExtraArgs = {
    proof: Array<PublicKey>;
};
export declare type VerifyLeafInstructionArgs = PickPartial<VerifyLeafInstructionDataArgs & VerifyLeafInstructionExtraArgs, 'proof'>;
export declare function verifyLeaf(context: Pick<Context, 'programs'>, input: VerifyLeafInstructionAccounts & VerifyLeafInstructionArgs): TransactionBuilder;
