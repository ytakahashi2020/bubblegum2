"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDasApiDecorator = void 0;
const errors_1 = require("./errors");
const createDasApiDecorator = (rpc) => ({
    ...rpc,
    getAsset: async (assetId) => {
        const asset = await rpc.call('getAsset', [assetId]);
        if (!asset)
            throw new errors_1.DasApiError(`Asset not found: ${assetId}`);
        return asset;
    },
    getAssets: async (assetIds) => {
        const assets = await rpc.call('getAssets', [
            assetIds,
        ]);
        if (!assets)
            throw new errors_1.DasApiError(`No assets found: ${assetIds}`);
        return assets;
    },
    getAssetProof: async (assetId) => {
        const proof = await rpc.call('getAssetProof', [assetId]);
        if (!proof)
            throw new errors_1.DasApiError(`No proof found for asset: ${assetId}`);
        return proof;
    },
    getAssetProofs: async (assetIds) => {
        const proofs = await rpc.call('getAssetProofs', [assetIds]);
        if (!proofs)
            throw new errors_1.DasApiError(`No proofs found for assets: ${assetIds}`);
        return proofs;
    },
    getAssetsByAuthority: async (input) => {
        if (typeof input.page === 'number' && (input.before || input.after)) {
            throw new errors_1.DasApiError('Pagination Error. Please use either page or before/after, but not both.');
        }
        const assetList = await rpc.call('getAssetsByAuthority', [
            input.authority,
            input.sortBy ?? null,
            input.limit ?? null,
            input.page ?? 1,
            input.before ?? null,
            input.after ?? null,
        ]);
        if (!assetList) {
            throw new errors_1.DasApiError(`No assets found for authority: ${input.authority}`);
        }
        return assetList;
    },
    getAssetsByCreator: async (input) => {
        if (typeof input.page === 'number' && (input.before || input.after)) {
            throw new errors_1.DasApiError('Pagination Error. Please use either page or before/after, but not both.');
        }
        const assetList = await rpc.call('getAssetsByCreator', [
            input.creator,
            input.onlyVerified,
            input.sortBy ?? null,
            input.limit ?? null,
            input.page ?? 1,
            input.before ?? null,
            input.after ?? null,
        ]);
        if (!assetList) {
            throw new errors_1.DasApiError(`No assets found for creator: ${input.creator}`);
        }
        return assetList;
    },
    getAssetsByGroup: async (input) => {
        if (typeof input.page === 'number' && (input.before || input.after)) {
            throw new errors_1.DasApiError('Pagination Error. Please use either page or before/after, but not both.');
        }
        const assetList = await rpc.call('getAssetsByGroup', [
            input.groupKey,
            input.groupValue,
            input.sortBy ?? null,
            input.limit ?? null,
            input.page ?? 1,
            input.before ?? null,
            input.after ?? null,
        ]);
        if (!assetList) {
            throw new errors_1.DasApiError(`No assets found for group: ${input.groupKey} => ${input.groupValue}`);
        }
        return assetList;
    },
    getAssetsByOwner: async (input) => {
        if (typeof input.page === 'number' && (input.before || input.after)) {
            throw new errors_1.DasApiError('Pagination Error. Please use either page or before/after, but not both.');
        }
        const assetList = await rpc.call('getAssetsByOwner', [
            input.owner,
            input.sortBy ?? null,
            input.limit ?? null,
            input.page ?? 1,
            input.before ?? null,
            input.after ?? null,
        ]);
        if (!assetList) {
            throw new errors_1.DasApiError(`No assets found for owner: ${input.owner}`);
        }
        return assetList;
    },
    searchAssets: async (input) => {
        if (typeof input.page === 'number' && (input.before || input.after)) {
            throw new errors_1.DasApiError('Pagination Error. Please use either page or before/after, but not both.');
        }
        const assetList = await rpc.call('searchAssets', [
            input.negate ?? null,
            input.conditionType ?? null,
            input.interface ?? null,
            input.owner ?? null,
            input.ownerType ?? null,
            input.creator ?? null,
            input.creatorVerified ?? null,
            input.authority ?? null,
            input.grouping ?? null,
            input.delegate ?? null,
            input.frozen ?? null,
            input.supply ?? null,
            input.supplyMint ?? null,
            input.compressed ?? null,
            input.compressible ?? null,
            input.royaltyModel ?? null,
            input.royaltyTarget ?? null,
            input.royaltyAmount ?? null,
            input.burnt ?? null,
            input.sortBy ?? null,
            input.limit ?? null,
            input.page ?? 1,
            input.before ?? null,
            input.after ?? null,
            input.jsonUri ?? null,
        ]);
        if (!assetList) {
            throw new errors_1.DasApiError('No assets found for the given search criteria');
        }
        return assetList;
    },
    getAssetSignatures: async (input) => {
        const signatures = await rpc.call('getAssetSignaturesV2', [
            'assetId' in input ? input.assetId : null,
            input.limit ?? null,
            input.page ?? null,
            input.before ?? null,
            input.after ?? null,
            'tree' in input ? input.tree : null,
            'tree' in input ? input.leaf_index : null,
            input.cursor ?? null,
            input.sort_direction ?? null,
        ]);
        if (!signatures) {
            const identifier = 'assetId' in input
                ? `asset: ${input.assetId}`
                : `tree: ${input.tree}, leaf_index: ${input.leaf_index}`;
            throw new errors_1.DasApiError(`No signatures found for ${identifier}`);
        }
        return signatures;
    },
});
exports.createDasApiDecorator = createDasApiDecorator;
//# sourceMappingURL=decorator.js.map