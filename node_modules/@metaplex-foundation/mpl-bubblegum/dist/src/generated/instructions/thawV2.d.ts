/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Option, OptionOrNullable, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { PickPartial } from '../shared';
export declare type ThawV2InstructionAccounts = {
    treeConfig?: PublicKey | Pda;
    payer?: Signer;
    /**
     * Optional authority, defaults to `payer`.  Must be either
     * the leaf delegate or collection permanent freeze delegate.
     */
    authority?: Signer;
    leafOwner: PublicKey | Pda;
    leafDelegate: PublicKey | Pda;
    merkleTree: PublicKey | Pda;
    coreCollection?: PublicKey | Pda;
    logWrapper?: PublicKey | Pda;
    compressionProgram?: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
};
export declare type ThawV2InstructionData = {
    discriminator: Array<number>;
    root: Uint8Array;
    dataHash: Uint8Array;
    creatorHash: Uint8Array;
    assetDataHash: Option<Uint8Array>;
    flags: Option<number>;
    nonce: bigint;
    index: number;
};
export declare type ThawV2InstructionDataArgs = {
    root: Uint8Array;
    dataHash: Uint8Array;
    creatorHash: Uint8Array;
    assetDataHash: OptionOrNullable<Uint8Array>;
    flags: OptionOrNullable<number>;
    nonce: number | bigint;
    index: number;
};
export declare function getThawV2InstructionDataSerializer(): Serializer<ThawV2InstructionDataArgs, ThawV2InstructionData>;
export declare type ThawV2InstructionExtraArgs = {
    proof: Array<PublicKey>;
};
export declare type ThawV2InstructionArgs = PickPartial<ThawV2InstructionDataArgs & ThawV2InstructionExtraArgs, 'assetDataHash' | 'flags' | 'proof'>;
export declare function thawV2(context: Pick<Context, 'eddsa' | 'payer' | 'programs'>, input: ThawV2InstructionAccounts & ThawV2InstructionArgs): TransactionBuilder;
