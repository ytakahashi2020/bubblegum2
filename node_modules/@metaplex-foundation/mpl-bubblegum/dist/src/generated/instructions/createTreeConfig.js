"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTreeConfig = exports.getCreateTreeConfigInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const accounts_1 = require("../accounts");
const shared_1 = require("../shared");
function getCreateTreeConfigInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['maxDepth', (0, serializers_1.u32)()],
        ['maxBufferSize', (0, serializers_1.u32)()],
        ['public', (0, serializers_1.option)((0, serializers_1.bool)())],
    ], { description: 'CreateTreeConfigInstructionData' }), (value) => ({
        ...value,
        discriminator: [165, 83, 136, 142, 89, 202, 47, 220],
        public: value.public ?? (0, umi_1.none)(),
    }));
}
exports.getCreateTreeConfigInstructionDataSerializer = getCreateTreeConfigInstructionDataSerializer;
// Instruction.
function createTreeConfig(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplBubblegum', 'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY');
    // Accounts.
    const resolvedAccounts = {
        treeConfig: { index: 0, isWritable: true, value: input.treeConfig ?? null },
        merkleTree: { index: 1, isWritable: true, value: input.merkleTree ?? null },
        payer: { index: 2, isWritable: true, value: input.payer ?? null },
        treeCreator: {
            index: 3,
            isWritable: false,
            value: input.treeCreator ?? null,
        },
        logWrapper: {
            index: 4,
            isWritable: false,
            value: input.logWrapper ?? null,
        },
        compressionProgram: {
            index: 5,
            isWritable: false,
            value: input.compressionProgram ?? null,
        },
        systemProgram: {
            index: 6,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.treeConfig.value) {
        resolvedAccounts.treeConfig.value = (0, accounts_1.findTreeConfigPda)(context, {
            merkleTree: (0, shared_1.expectPublicKey)(resolvedAccounts.merkleTree.value),
        });
    }
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    if (!resolvedAccounts.treeCreator.value) {
        resolvedAccounts.treeCreator.value = context.identity;
    }
    if (!resolvedAccounts.logWrapper.value) {
        resolvedAccounts.logWrapper.value = context.programs.getPublicKey('splNoop', 'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV');
        resolvedAccounts.logWrapper.isWritable = false;
    }
    if (!resolvedAccounts.compressionProgram.value) {
        resolvedAccounts.compressionProgram.value = context.programs.getPublicKey('splAccountCompression', 'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK');
        resolvedAccounts.compressionProgram.isWritable = false;
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getCreateTreeConfigInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = (0, accounts_1.getTreeConfigSize)() + umi_1.ACCOUNT_HEADER_SIZE;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.createTreeConfig = createTreeConfig;
//# sourceMappingURL=createTreeConfig.js.map