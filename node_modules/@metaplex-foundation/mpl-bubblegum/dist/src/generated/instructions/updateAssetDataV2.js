"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateAssetDataV2 = exports.getUpdateAssetDataV2InstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const accounts_1 = require("../accounts");
const shared_1 = require("../shared");
const types_1 = require("../types");
function getUpdateAssetDataV2InstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['root', (0, serializers_1.bytes)({ size: 32 })],
        ['dataHash', (0, serializers_1.bytes)({ size: 32 })],
        ['creatorHash', (0, serializers_1.bytes)({ size: 32 })],
        ['previousAssetDataHash', (0, serializers_1.option)((0, serializers_1.bytes)({ size: 32 }))],
        ['flags', (0, serializers_1.option)((0, serializers_1.u8)())],
        ['nonce', (0, serializers_1.u64)()],
        ['index', (0, serializers_1.u32)()],
        ['newAssetData', (0, serializers_1.option)((0, serializers_1.bytes)({ size: (0, serializers_1.u32)() }))],
        ['newAssetDataSchema', (0, serializers_1.option)((0, types_1.getAssetDataSchemaSerializer)())],
    ], { description: 'UpdateAssetDataV2InstructionData' }), (value) => ({ ...value, discriminator: [59, 56, 111, 43, 95, 14, 11, 61] }));
}
exports.getUpdateAssetDataV2InstructionDataSerializer = getUpdateAssetDataV2InstructionDataSerializer;
// Instruction.
function updateAssetDataV2(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplBubblegum', 'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY');
    // Accounts.
    const resolvedAccounts = {
        treeConfig: { index: 0, isWritable: true, value: input.treeConfig ?? null },
        payer: { index: 1, isWritable: true, value: input.payer ?? null },
        authority: { index: 2, isWritable: false, value: input.authority ?? null },
        leafOwner: { index: 3, isWritable: false, value: input.leafOwner ?? null },
        leafDelegate: {
            index: 4,
            isWritable: false,
            value: input.leafDelegate ?? null,
        },
        merkleTree: { index: 5, isWritable: true, value: input.merkleTree ?? null },
        coreCollection: {
            index: 6,
            isWritable: false,
            value: input.coreCollection ?? null,
        },
        logWrapper: {
            index: 7,
            isWritable: false,
            value: input.logWrapper ?? null,
        },
        compressionProgram: {
            index: 8,
            isWritable: false,
            value: input.compressionProgram ?? null,
        },
        systemProgram: {
            index: 9,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.treeConfig.value) {
        resolvedAccounts.treeConfig.value = (0, accounts_1.findTreeConfigPda)(context, {
            merkleTree: (0, shared_1.expectPublicKey)(resolvedAccounts.merkleTree.value),
        });
    }
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    if (!resolvedAccounts.logWrapper.value) {
        resolvedAccounts.logWrapper.value = context.programs.getPublicKey('mplNoop', 'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3');
        resolvedAccounts.logWrapper.isWritable = false;
    }
    if (!resolvedAccounts.compressionProgram.value) {
        resolvedAccounts.compressionProgram.value = context.programs.getPublicKey('mplAccountCompression', 'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW');
        resolvedAccounts.compressionProgram.isWritable = false;
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    if (!resolvedArgs.previousAssetDataHash) {
        resolvedArgs.previousAssetDataHash = (0, umi_1.none)();
    }
    if (!resolvedArgs.flags) {
        resolvedArgs.flags = (0, umi_1.none)();
    }
    if (!resolvedArgs.newAssetData) {
        resolvedArgs.newAssetData = (0, umi_1.none)();
    }
    if (!resolvedArgs.newAssetDataSchema) {
        resolvedArgs.newAssetDataSchema = (0, umi_1.none)();
    }
    if (!resolvedArgs.proof) {
        resolvedArgs.proof = [];
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Remaining Accounts.
    const remainingAccounts = resolvedArgs.proof.map((value, index) => ({
        index,
        value,
        isWritable: false,
    }));
    orderedAccounts.push(...remainingAccounts);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getUpdateAssetDataV2InstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.updateAssetDataV2 = updateAssetDataV2;
//# sourceMappingURL=updateAssetDataV2.js.map