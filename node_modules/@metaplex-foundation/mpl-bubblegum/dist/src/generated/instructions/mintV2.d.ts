/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Option, OptionOrNullable, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { PickPartial } from '../shared';
import { AssetDataSchema, AssetDataSchemaArgs, MetadataArgsV2, MetadataArgsV2Args } from '../types';
export declare type MintV2InstructionAccounts = {
    treeConfig?: PublicKey | Pda;
    payer?: Signer;
    /** Optional tree delegate, defaults to `payer` */
    treeCreatorOrDelegate?: Signer;
    /** Optional collection authority, defaults to `tree_delegate` */
    collectionAuthority?: Signer;
    leafOwner: PublicKey | Pda;
    leafDelegate?: PublicKey | Pda;
    merkleTree: PublicKey | Pda;
    coreCollection?: PublicKey | Pda;
    mplCoreCpiSigner?: PublicKey | Pda;
    logWrapper?: PublicKey | Pda;
    compressionProgram?: PublicKey | Pda;
    mplCoreProgram?: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
};
export declare type MintV2InstructionData = {
    discriminator: Array<number>;
    metadata: MetadataArgsV2;
    assetData: Option<Uint8Array>;
    assetDataSchema: Option<AssetDataSchema>;
};
export declare type MintV2InstructionDataArgs = {
    metadata: MetadataArgsV2Args;
    assetData: OptionOrNullable<Uint8Array>;
    assetDataSchema: OptionOrNullable<AssetDataSchemaArgs>;
};
export declare function getMintV2InstructionDataSerializer(): Serializer<MintV2InstructionDataArgs, MintV2InstructionData>;
export declare type MintV2InstructionArgs = PickPartial<MintV2InstructionDataArgs, 'assetData' | 'assetDataSchema'>;
export declare function mintV2(context: Pick<Context, 'eddsa' | 'payer' | 'programs'>, input: MintV2InstructionAccounts & MintV2InstructionArgs): TransactionBuilder;
