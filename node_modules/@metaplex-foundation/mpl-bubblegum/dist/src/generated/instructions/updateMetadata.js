"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateMetadata = exports.getUpdateMetadataInstructionDataSerializer = void 0;
const mpl_token_metadata_1 = require("@metaplex-foundation/mpl-token-metadata");
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const accounts_1 = require("../accounts");
const shared_1 = require("../shared");
const types_1 = require("../types");
function getUpdateMetadataInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['root', (0, serializers_1.bytes)({ size: 32 })],
        ['nonce', (0, serializers_1.u64)()],
        ['index', (0, serializers_1.u32)()],
        ['currentMetadata', (0, types_1.getMetadataArgsSerializer)()],
        ['updateArgs', (0, types_1.getUpdateArgsSerializer)()],
    ], { description: 'UpdateMetadataInstructionData' }), (value) => ({
        ...value,
        discriminator: [170, 182, 43, 239, 97, 78, 225, 186],
    }));
}
exports.getUpdateMetadataInstructionDataSerializer = getUpdateMetadataInstructionDataSerializer;
// Instruction.
function updateMetadata(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplBubblegum', 'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY');
    // Accounts.
    const resolvedAccounts = {
        treeConfig: {
            index: 0,
            isWritable: false,
            value: input.treeConfig ?? null,
        },
        authority: { index: 1, isWritable: false, value: input.authority ?? null },
        collectionMint: {
            index: 2,
            isWritable: false,
            value: input.collectionMint ?? null,
        },
        collectionMetadata: {
            index: 3,
            isWritable: false,
            value: input.collectionMetadata ?? null,
        },
        collectionAuthorityRecordPda: {
            index: 4,
            isWritable: false,
            value: input.collectionAuthorityRecordPda ?? null,
        },
        leafOwner: { index: 5, isWritable: false, value: input.leafOwner ?? null },
        leafDelegate: {
            index: 6,
            isWritable: false,
            value: input.leafDelegate ?? null,
        },
        payer: { index: 7, isWritable: false, value: input.payer ?? null },
        merkleTree: { index: 8, isWritable: true, value: input.merkleTree ?? null },
        logWrapper: {
            index: 9,
            isWritable: false,
            value: input.logWrapper ?? null,
        },
        compressionProgram: {
            index: 10,
            isWritable: false,
            value: input.compressionProgram ?? null,
        },
        tokenMetadataProgram: {
            index: 11,
            isWritable: false,
            value: input.tokenMetadataProgram ?? null,
        },
        systemProgram: {
            index: 12,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.treeConfig.value) {
        resolvedAccounts.treeConfig.value = (0, accounts_1.findTreeConfigPda)(context, {
            merkleTree: (0, shared_1.expectPublicKey)(resolvedAccounts.merkleTree.value),
        });
    }
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity;
    }
    if (!resolvedAccounts.collectionMetadata.value) {
        if (resolvedAccounts.collectionMint.value) {
            resolvedAccounts.collectionMetadata.value = (0, mpl_token_metadata_1.findMetadataPda)(context, {
                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.collectionMint.value),
            });
        }
    }
    if (!resolvedAccounts.leafDelegate.value) {
        resolvedAccounts.leafDelegate.value = (0, shared_1.expectSome)(resolvedAccounts.leafOwner.value);
    }
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    if (!resolvedAccounts.logWrapper.value) {
        resolvedAccounts.logWrapper.value = context.programs.getPublicKey('splNoop', 'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV');
        resolvedAccounts.logWrapper.isWritable = false;
    }
    if (!resolvedAccounts.compressionProgram.value) {
        resolvedAccounts.compressionProgram.value = context.programs.getPublicKey('splAccountCompression', 'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK');
        resolvedAccounts.compressionProgram.isWritable = false;
    }
    if (!resolvedAccounts.tokenMetadataProgram.value) {
        resolvedAccounts.tokenMetadataProgram.value = (0, umi_1.publicKey)('BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY');
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    if (!resolvedArgs.proof) {
        resolvedArgs.proof = [];
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Remaining Accounts.
    const remainingAccounts = resolvedArgs.proof.map((value, index) => ({
        index,
        value,
        isWritable: false,
    }));
    orderedAccounts.push(...remainingAccounts);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getUpdateMetadataInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.updateMetadata = updateMetadata;
//# sourceMappingURL=updateMetadata.js.map