/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { PickPartial } from '../shared';
import { MetadataArgs, MetadataArgsArgs, UpdateArgs, UpdateArgsArgs } from '../types';
export declare type UpdateMetadataInstructionAccounts = {
    treeConfig?: PublicKey | Pda;
    /**
     * Either collection authority or tree owner/delegate, depending
     * on whether the item is in a verified collection
     */
    authority?: Signer;
    /** Used when item is in a verified collection */
    collectionMint?: PublicKey | Pda;
    /** Used when item is in a verified collection */
    collectionMetadata?: PublicKey | Pda;
    collectionAuthorityRecordPda?: PublicKey | Pda;
    leafOwner: PublicKey | Pda;
    leafDelegate?: PublicKey | Pda;
    payer?: Signer;
    merkleTree: PublicKey | Pda;
    logWrapper?: PublicKey | Pda;
    compressionProgram?: PublicKey | Pda;
    tokenMetadataProgram?: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
};
export declare type UpdateMetadataInstructionData = {
    discriminator: Array<number>;
    root: Uint8Array;
    nonce: bigint;
    index: number;
    currentMetadata: MetadataArgs;
    updateArgs: UpdateArgs;
};
export declare type UpdateMetadataInstructionDataArgs = {
    root: Uint8Array;
    nonce: number | bigint;
    index: number;
    currentMetadata: MetadataArgsArgs;
    updateArgs: UpdateArgsArgs;
};
export declare function getUpdateMetadataInstructionDataSerializer(): Serializer<UpdateMetadataInstructionDataArgs, UpdateMetadataInstructionData>;
export declare type UpdateMetadataInstructionExtraArgs = {
    proof: Array<PublicKey>;
};
export declare type UpdateMetadataInstructionArgs = PickPartial<UpdateMetadataInstructionDataArgs & UpdateMetadataInstructionExtraArgs, 'proof'>;
export declare function updateMetadata(context: Pick<Context, 'eddsa' | 'identity' | 'payer' | 'programs'>, input: UpdateMetadataInstructionAccounts & UpdateMetadataInstructionArgs): TransactionBuilder;
