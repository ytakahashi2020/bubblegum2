/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { MetadataArgs, MetadataArgsArgs } from '../types';
export declare type DecompressV1InstructionAccounts = {
    voucher: PublicKey | Pda;
    leafOwner: Signer;
    tokenAccount?: PublicKey | Pda;
    mint: PublicKey | Pda;
    mintAuthority?: PublicKey | Pda;
    metadataAccount?: PublicKey | Pda;
    masterEdition?: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
    sysvarRent?: PublicKey | Pda;
    tokenMetadataProgram?: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
    associatedTokenProgram?: PublicKey | Pda;
    logWrapper?: PublicKey | Pda;
};
export declare type DecompressV1InstructionData = {
    discriminator: Array<number>;
    metadata: MetadataArgs;
};
export declare type DecompressV1InstructionDataArgs = {
    metadata: MetadataArgsArgs;
};
export declare function getDecompressV1InstructionDataSerializer(): Serializer<DecompressV1InstructionDataArgs, DecompressV1InstructionData>;
export declare type DecompressV1InstructionArgs = DecompressV1InstructionDataArgs;
export declare function decompressV1(context: Pick<Context, 'eddsa' | 'programs'>, input: DecompressV1InstructionAccounts & DecompressV1InstructionArgs): TransactionBuilder;
