/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { PickPartial } from '../shared';
import { MetadataArgs, MetadataArgsArgs } from '../types';
export declare type SetAndVerifyCollectionInstructionAccounts = {
    treeConfig?: PublicKey | Pda;
    leafOwner: PublicKey | Pda;
    leafDelegate?: PublicKey | Pda;
    merkleTree: PublicKey | Pda;
    payer?: Signer;
    /**
     * This account is checked to be a signer in
     * the case of `set_and_verify_collection` where
     * we are actually changing the NFT metadata.
     */
    treeCreatorOrDelegate?: PublicKey | Pda | Signer;
    collectionAuthority?: Signer;
    /**
     * If there is no collecton authority record PDA then
     * this must be the Bubblegum program address.
     */
    collectionAuthorityRecordPda?: PublicKey | Pda;
    collectionMint: PublicKey | Pda;
    collectionMetadata?: PublicKey | Pda;
    collectionEdition?: PublicKey | Pda;
    bubblegumSigner?: PublicKey | Pda;
    logWrapper?: PublicKey | Pda;
    compressionProgram?: PublicKey | Pda;
    tokenMetadataProgram?: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
};
export declare type SetAndVerifyCollectionInstructionData = {
    discriminator: Array<number>;
    root: Uint8Array;
    dataHash: Uint8Array;
    creatorHash: Uint8Array;
    nonce: bigint;
    index: number;
    metadata: MetadataArgs;
    collection: PublicKey;
};
export declare type SetAndVerifyCollectionInstructionDataArgs = {
    root: Uint8Array;
    dataHash: Uint8Array;
    creatorHash: Uint8Array;
    nonce: number | bigint;
    index: number;
    metadata: MetadataArgsArgs;
    collection: PublicKey;
};
export declare function getSetAndVerifyCollectionInstructionDataSerializer(): Serializer<SetAndVerifyCollectionInstructionDataArgs, SetAndVerifyCollectionInstructionData>;
export declare type SetAndVerifyCollectionInstructionExtraArgs = {
    proof: Array<PublicKey>;
};
export declare type SetAndVerifyCollectionInstructionArgs = PickPartial<SetAndVerifyCollectionInstructionDataArgs & SetAndVerifyCollectionInstructionExtraArgs, 'dataHash' | 'creatorHash' | 'collection' | 'proof'>;
export declare function setAndVerifyCollection(context: Pick<Context, 'eddsa' | 'identity' | 'payer' | 'programs'>, input: SetAndVerifyCollectionInstructionAccounts & SetAndVerifyCollectionInstructionArgs): TransactionBuilder;
