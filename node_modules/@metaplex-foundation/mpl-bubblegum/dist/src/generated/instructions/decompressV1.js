"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.decompressV1 = exports.getDecompressV1InstructionDataSerializer = void 0;
const mpl_token_metadata_1 = require("@metaplex-foundation/mpl-token-metadata");
const mpl_toolbox_1 = require("@metaplex-foundation/mpl-toolbox");
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const hooked_1 = require("../../hooked");
const shared_1 = require("../shared");
const types_1 = require("../types");
function getDecompressV1InstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['metadata', (0, types_1.getMetadataArgsSerializer)()],
    ], { description: 'DecompressV1InstructionData' }), (value) => ({
        ...value,
        discriminator: [54, 85, 76, 70, 228, 250, 164, 81],
    }));
}
exports.getDecompressV1InstructionDataSerializer = getDecompressV1InstructionDataSerializer;
// Instruction.
function decompressV1(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplBubblegum', 'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY');
    // Accounts.
    const resolvedAccounts = {
        voucher: { index: 0, isWritable: true, value: input.voucher ?? null },
        leafOwner: { index: 1, isWritable: true, value: input.leafOwner ?? null },
        tokenAccount: {
            index: 2,
            isWritable: true,
            value: input.tokenAccount ?? null,
        },
        mint: { index: 3, isWritable: true, value: input.mint ?? null },
        mintAuthority: {
            index: 4,
            isWritable: true,
            value: input.mintAuthority ?? null,
        },
        metadataAccount: {
            index: 5,
            isWritable: true,
            value: input.metadataAccount ?? null,
        },
        masterEdition: {
            index: 6,
            isWritable: true,
            value: input.masterEdition ?? null,
        },
        systemProgram: {
            index: 7,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
        sysvarRent: {
            index: 8,
            isWritable: false,
            value: input.sysvarRent ?? null,
        },
        tokenMetadataProgram: {
            index: 9,
            isWritable: false,
            value: input.tokenMetadataProgram ?? null,
        },
        tokenProgram: {
            index: 10,
            isWritable: false,
            value: input.tokenProgram ?? null,
        },
        associatedTokenProgram: {
            index: 11,
            isWritable: false,
            value: input.associatedTokenProgram ?? null,
        },
        logWrapper: {
            index: 12,
            isWritable: false,
            value: input.logWrapper ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.tokenAccount.value) {
        resolvedAccounts.tokenAccount.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
            owner: (0, shared_1.expectPublicKey)(resolvedAccounts.leafOwner.value),
        });
    }
    if (!resolvedAccounts.mintAuthority.value) {
        resolvedAccounts.mintAuthority.value = (0, hooked_1.findMintAuthorityPda)(context, {
            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
        });
    }
    if (!resolvedAccounts.metadataAccount.value) {
        resolvedAccounts.metadataAccount.value = (0, mpl_token_metadata_1.findMetadataPda)(context, {
            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
        });
    }
    if (!resolvedAccounts.masterEdition.value) {
        resolvedAccounts.masterEdition.value = (0, mpl_token_metadata_1.findMasterEditionPda)(context, {
            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
        });
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    if (!resolvedAccounts.sysvarRent.value) {
        resolvedAccounts.sysvarRent.value = (0, umi_1.publicKey)('SysvarRent111111111111111111111111111111111');
    }
    if (!resolvedAccounts.tokenMetadataProgram.value) {
        resolvedAccounts.tokenMetadataProgram.value = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
        resolvedAccounts.tokenMetadataProgram.isWritable = false;
    }
    if (!resolvedAccounts.tokenProgram.value) {
        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
        resolvedAccounts.tokenProgram.isWritable = false;
    }
    if (!resolvedAccounts.associatedTokenProgram.value) {
        resolvedAccounts.associatedTokenProgram.value =
            context.programs.getPublicKey('splAssociatedToken', 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
        resolvedAccounts.associatedTokenProgram.isWritable = false;
    }
    if (!resolvedAccounts.logWrapper.value) {
        resolvedAccounts.logWrapper.value = context.programs.getPublicKey('splNoop', 'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV');
        resolvedAccounts.logWrapper.isWritable = false;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getDecompressV1InstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.decompressV1 = decompressV1;
//# sourceMappingURL=decompressV1.js.map