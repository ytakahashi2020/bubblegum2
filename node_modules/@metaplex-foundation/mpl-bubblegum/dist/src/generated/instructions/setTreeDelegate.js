"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.setTreeDelegate = exports.getSetTreeDelegateInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const accounts_1 = require("../accounts");
const shared_1 = require("../shared");
function getSetTreeDelegateInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })]], { description: 'SetTreeDelegateInstructionData' }), (value) => ({
        ...value,
        discriminator: [253, 118, 66, 37, 190, 49, 154, 102],
    }));
}
exports.getSetTreeDelegateInstructionDataSerializer = getSetTreeDelegateInstructionDataSerializer;
// Instruction.
function setTreeDelegate(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplBubblegum', 'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY');
    // Accounts.
    const resolvedAccounts = {
        treeConfig: { index: 0, isWritable: true, value: input.treeConfig ?? null },
        treeCreator: {
            index: 1,
            isWritable: false,
            value: input.treeCreator ?? null,
        },
        newTreeDelegate: {
            index: 2,
            isWritable: false,
            value: input.newTreeDelegate ?? null,
        },
        merkleTree: {
            index: 3,
            isWritable: false,
            value: input.merkleTree ?? null,
        },
        systemProgram: {
            index: 4,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.treeConfig.value) {
        resolvedAccounts.treeConfig.value = (0, accounts_1.findTreeConfigPda)(context, {
            merkleTree: (0, shared_1.expectPublicKey)(resolvedAccounts.merkleTree.value),
        });
    }
    if (!resolvedAccounts.treeCreator.value) {
        resolvedAccounts.treeCreator.value = context.identity;
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getSetTreeDelegateInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.setTreeDelegate = setTreeDelegate;
//# sourceMappingURL=setTreeDelegate.js.map