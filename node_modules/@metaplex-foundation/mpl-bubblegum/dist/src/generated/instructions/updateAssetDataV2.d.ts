/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Option, OptionOrNullable, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { PickPartial } from '../shared';
import { AssetDataSchema, AssetDataSchemaArgs } from '../types';
export declare type UpdateAssetDataV2InstructionAccounts = {
    treeConfig?: PublicKey | Pda;
    payer?: Signer;
    /**
     * Either collection authority or tree owner/delegate, depending on
     * whether the item is in a verified collection.  Defaults to `payer`
     */
    authority?: Signer;
    leafOwner: PublicKey | Pda;
    leafDelegate?: PublicKey | Pda;
    merkleTree: PublicKey | Pda;
    coreCollection?: PublicKey | Pda;
    logWrapper?: PublicKey | Pda;
    compressionProgram?: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
};
export declare type UpdateAssetDataV2InstructionData = {
    discriminator: Array<number>;
    root: Uint8Array;
    dataHash: Uint8Array;
    creatorHash: Uint8Array;
    previousAssetDataHash: Option<Uint8Array>;
    flags: Option<number>;
    nonce: bigint;
    index: number;
    newAssetData: Option<Uint8Array>;
    newAssetDataSchema: Option<AssetDataSchema>;
};
export declare type UpdateAssetDataV2InstructionDataArgs = {
    root: Uint8Array;
    dataHash: Uint8Array;
    creatorHash: Uint8Array;
    previousAssetDataHash: OptionOrNullable<Uint8Array>;
    flags: OptionOrNullable<number>;
    nonce: number | bigint;
    index: number;
    newAssetData: OptionOrNullable<Uint8Array>;
    newAssetDataSchema: OptionOrNullable<AssetDataSchemaArgs>;
};
export declare function getUpdateAssetDataV2InstructionDataSerializer(): Serializer<UpdateAssetDataV2InstructionDataArgs, UpdateAssetDataV2InstructionData>;
export declare type UpdateAssetDataV2InstructionExtraArgs = {
    proof: Array<PublicKey>;
};
export declare type UpdateAssetDataV2InstructionArgs = PickPartial<UpdateAssetDataV2InstructionDataArgs & UpdateAssetDataV2InstructionExtraArgs, 'previousAssetDataHash' | 'flags' | 'newAssetData' | 'newAssetDataSchema' | 'proof'>;
export declare function updateAssetDataV2(context: Pick<Context, 'eddsa' | 'payer' | 'programs'>, input: UpdateAssetDataV2InstructionAccounts & UpdateAssetDataV2InstructionArgs): TransactionBuilder;
