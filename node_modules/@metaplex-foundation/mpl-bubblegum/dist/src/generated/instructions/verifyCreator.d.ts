/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { PickPartial } from '../shared';
import { MetadataArgs, MetadataArgsArgs } from '../types';
export declare type VerifyCreatorInstructionAccounts = {
    treeConfig?: PublicKey | Pda;
    leafOwner: PublicKey | Pda;
    leafDelegate?: PublicKey | Pda;
    merkleTree: PublicKey | Pda;
    payer?: Signer;
    creator: Signer;
    logWrapper?: PublicKey | Pda;
    compressionProgram?: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
};
export declare type VerifyCreatorInstructionData = {
    discriminator: Array<number>;
    root: Uint8Array;
    dataHash: Uint8Array;
    creatorHash: Uint8Array;
    nonce: bigint;
    index: number;
    metadata: MetadataArgs;
};
export declare type VerifyCreatorInstructionDataArgs = {
    root: Uint8Array;
    dataHash: Uint8Array;
    creatorHash: Uint8Array;
    nonce: number | bigint;
    index: number;
    metadata: MetadataArgsArgs;
};
export declare function getVerifyCreatorInstructionDataSerializer(): Serializer<VerifyCreatorInstructionDataArgs, VerifyCreatorInstructionData>;
export declare type VerifyCreatorInstructionExtraArgs = {
    proof: Array<PublicKey>;
};
export declare type VerifyCreatorInstructionArgs = PickPartial<VerifyCreatorInstructionDataArgs & VerifyCreatorInstructionExtraArgs, 'dataHash' | 'creatorHash' | 'proof'>;
export declare function verifyCreator(context: Pick<Context, 'eddsa' | 'identity' | 'payer' | 'programs'>, input: VerifyCreatorInstructionAccounts & VerifyCreatorInstructionArgs): TransactionBuilder;
