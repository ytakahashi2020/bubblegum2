"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mintV2 = exports.getMintV2InstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const accounts_1 = require("../accounts");
const shared_1 = require("../shared");
const types_1 = require("../types");
function getMintV2InstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['metadata', (0, types_1.getMetadataArgsV2Serializer)()],
        ['assetData', (0, serializers_1.option)((0, serializers_1.bytes)({ size: (0, serializers_1.u32)() }))],
        ['assetDataSchema', (0, serializers_1.option)((0, types_1.getAssetDataSchemaSerializer)())],
    ], { description: 'MintV2InstructionData' }), (value) => ({
        ...value,
        discriminator: [120, 121, 23, 146, 173, 110, 199, 205],
    }));
}
exports.getMintV2InstructionDataSerializer = getMintV2InstructionDataSerializer;
// Instruction.
function mintV2(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplBubblegum', 'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY');
    // Accounts.
    const resolvedAccounts = {
        treeConfig: { index: 0, isWritable: true, value: input.treeConfig ?? null },
        payer: { index: 1, isWritable: true, value: input.payer ?? null },
        treeCreatorOrDelegate: {
            index: 2,
            isWritable: false,
            value: input.treeCreatorOrDelegate ?? null,
        },
        collectionAuthority: {
            index: 3,
            isWritable: false,
            value: input.collectionAuthority ?? null,
        },
        leafOwner: { index: 4, isWritable: false, value: input.leafOwner ?? null },
        leafDelegate: {
            index: 5,
            isWritable: false,
            value: input.leafDelegate ?? null,
        },
        merkleTree: { index: 6, isWritable: true, value: input.merkleTree ?? null },
        coreCollection: {
            index: 7,
            isWritable: true,
            value: input.coreCollection ?? null,
        },
        mplCoreCpiSigner: {
            index: 8,
            isWritable: false,
            value: input.mplCoreCpiSigner ?? null,
        },
        logWrapper: {
            index: 9,
            isWritable: false,
            value: input.logWrapper ?? null,
        },
        compressionProgram: {
            index: 10,
            isWritable: false,
            value: input.compressionProgram ?? null,
        },
        mplCoreProgram: {
            index: 11,
            isWritable: false,
            value: input.mplCoreProgram ?? null,
        },
        systemProgram: {
            index: 12,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.treeConfig.value) {
        resolvedAccounts.treeConfig.value = (0, accounts_1.findTreeConfigPda)(context, {
            merkleTree: (0, shared_1.expectPublicKey)(resolvedAccounts.merkleTree.value),
        });
    }
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    if (!resolvedAccounts.mplCoreCpiSigner.value) {
        if (resolvedAccounts.coreCollection.value) {
            resolvedAccounts.mplCoreCpiSigner.value = (0, umi_1.publicKey)('CbNY3JiXdXNE9tPNEk1aRZVEkWdj2v7kfJLNQwZZgpXk');
        }
    }
    if (!resolvedAccounts.logWrapper.value) {
        resolvedAccounts.logWrapper.value = context.programs.getPublicKey('mplNoop', 'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3');
        resolvedAccounts.logWrapper.isWritable = false;
    }
    if (!resolvedAccounts.compressionProgram.value) {
        resolvedAccounts.compressionProgram.value = context.programs.getPublicKey('mplAccountCompression', 'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW');
        resolvedAccounts.compressionProgram.isWritable = false;
    }
    if (!resolvedAccounts.mplCoreProgram.value) {
        resolvedAccounts.mplCoreProgram.value = context.programs.getPublicKey('mplCore', 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d');
        resolvedAccounts.mplCoreProgram.isWritable = false;
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    if (!resolvedArgs.assetData) {
        resolvedArgs.assetData = (0, umi_1.none)();
    }
    if (!resolvedArgs.assetDataSchema) {
        resolvedArgs.assetDataSchema = (0, umi_1.none)();
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getMintV2InstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.mintV2 = mintV2;
//# sourceMappingURL=mintV2.js.map