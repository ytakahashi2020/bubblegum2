/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Option, OptionOrNullable, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export declare type CreateTreeConfigInstructionAccounts = {
    treeConfig?: PublicKey | Pda;
    merkleTree: PublicKey | Pda;
    payer?: Signer;
    treeCreator?: Signer;
    logWrapper?: PublicKey | Pda;
    compressionProgram?: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
};
export declare type CreateTreeConfigInstructionData = {
    discriminator: Array<number>;
    maxDepth: number;
    maxBufferSize: number;
    public: Option<boolean>;
};
export declare type CreateTreeConfigInstructionDataArgs = {
    maxDepth: number;
    maxBufferSize: number;
    public?: OptionOrNullable<boolean>;
};
export declare function getCreateTreeConfigInstructionDataSerializer(): Serializer<CreateTreeConfigInstructionDataArgs, CreateTreeConfigInstructionData>;
export declare type CreateTreeConfigInstructionArgs = CreateTreeConfigInstructionDataArgs;
export declare function createTreeConfig(context: Pick<Context, 'eddsa' | 'identity' | 'payer' | 'programs'>, input: CreateTreeConfigInstructionAccounts & CreateTreeConfigInstructionArgs): TransactionBuilder;
