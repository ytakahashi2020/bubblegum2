/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Option, OptionOrNullable } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { Collection, CollectionArgs, Creator, CreatorArgs, TokenProgramVersion, TokenProgramVersionArgs, TokenStandard, TokenStandardArgs, Uses, UsesArgs } from '.';
export declare type MetadataArgs = {
    /** The name of the asset */
    name: string;
    /** The symbol for the asset */
    symbol: string;
    /** URI pointing to JSON representing the asset */
    uri: string;
    /** Royalty basis points that goes to creators in secondary sales (0-10000) */
    sellerFeeBasisPoints: number;
    /** Immutable, once flipped, all sales of this metadata are considered secondary. */
    primarySaleHappened: boolean;
    /** Whether or not the data struct is mutable, default is not */
    isMutable: boolean;
    /** nonce for easy calculation of editions, if present */
    editionNonce: Option<number>;
    /** Token standard.  Currently only `NonFungible` is allowed. */
    tokenStandard: Option<TokenStandard>;
    /** Collection */
    collection: Option<Collection>;
    /** Uses */
    uses: Option<Uses>;
    tokenProgramVersion: TokenProgramVersion;
    creators: Array<Creator>;
};
export declare type MetadataArgsArgs = {
    /** The name of the asset */
    name: string;
    /** The symbol for the asset */
    symbol?: string;
    /** URI pointing to JSON representing the asset */
    uri: string;
    /** Royalty basis points that goes to creators in secondary sales (0-10000) */
    sellerFeeBasisPoints: number;
    /** Immutable, once flipped, all sales of this metadata are considered secondary. */
    primarySaleHappened?: boolean;
    /** Whether or not the data struct is mutable, default is not */
    isMutable?: boolean;
    /** nonce for easy calculation of editions, if present */
    editionNonce?: OptionOrNullable<number>;
    /** Token standard.  Currently only `NonFungible` is allowed. */
    tokenStandard?: OptionOrNullable<TokenStandardArgs>;
    /** Collection */
    collection: OptionOrNullable<CollectionArgs>;
    /** Uses */
    uses?: OptionOrNullable<UsesArgs>;
    tokenProgramVersion?: TokenProgramVersionArgs;
    creators: Array<CreatorArgs>;
};
export declare function getMetadataArgsSerializer(): Serializer<MetadataArgsArgs, MetadataArgs>;
