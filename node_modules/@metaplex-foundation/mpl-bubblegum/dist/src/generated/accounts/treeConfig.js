"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeFetchTreeConfigFromSeeds = exports.fetchTreeConfigFromSeeds = exports.findTreeConfigPda = exports.getTreeConfigSize = exports.getTreeConfigGpaBuilder = exports.safeFetchAllTreeConfig = exports.fetchAllTreeConfig = exports.safeFetchTreeConfig = exports.fetchTreeConfig = exports.deserializeTreeConfig = exports.getTreeConfigAccountDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const types_1 = require("../types");
function getTreeConfigAccountDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['treeCreator', (0, serializers_1.publicKey)()],
        ['treeDelegate', (0, serializers_1.publicKey)()],
        ['totalMintCapacity', (0, serializers_1.u64)()],
        ['numMinted', (0, serializers_1.u64)()],
        ['isPublic', (0, serializers_1.bool)()],
        ['isDecompressible', (0, types_1.getDecompressibleStateSerializer)()],
        ['version', (0, types_1.getVersionSerializer)()],
    ], { description: 'TreeConfigAccountData' }), (value) => ({
        ...value,
        discriminator: [122, 245, 175, 248, 171, 34, 0, 207],
    }));
}
exports.getTreeConfigAccountDataSerializer = getTreeConfigAccountDataSerializer;
function deserializeTreeConfig(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getTreeConfigAccountDataSerializer());
}
exports.deserializeTreeConfig = deserializeTreeConfig;
async function fetchTreeConfig(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'TreeConfig');
    return deserializeTreeConfig(maybeAccount);
}
exports.fetchTreeConfig = fetchTreeConfig;
async function safeFetchTreeConfig(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeTreeConfig(maybeAccount) : null;
}
exports.safeFetchTreeConfig = safeFetchTreeConfig;
async function fetchAllTreeConfig(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'TreeConfig');
        return deserializeTreeConfig(maybeAccount);
    });
}
exports.fetchAllTreeConfig = fetchAllTreeConfig;
async function safeFetchAllTreeConfig(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeTreeConfig(maybeAccount));
}
exports.safeFetchAllTreeConfig = safeFetchAllTreeConfig;
function getTreeConfigGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplBubblegum', 'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        treeCreator: [8, (0, serializers_1.publicKey)()],
        treeDelegate: [40, (0, serializers_1.publicKey)()],
        totalMintCapacity: [72, (0, serializers_1.u64)()],
        numMinted: [80, (0, serializers_1.u64)()],
        isPublic: [88, (0, serializers_1.bool)()],
        isDecompressible: [89, (0, types_1.getDecompressibleStateSerializer)()],
        version: [90, (0, types_1.getVersionSerializer)()],
    })
        .deserializeUsing((account) => deserializeTreeConfig(account))
        .whereField('discriminator', [122, 245, 175, 248, 171, 34, 0, 207]);
}
exports.getTreeConfigGpaBuilder = getTreeConfigGpaBuilder;
function getTreeConfigSize() {
    return 96;
}
exports.getTreeConfigSize = getTreeConfigSize;
function findTreeConfigPda(context, seeds) {
    const programId = context.programs.getPublicKey('mplBubblegum', 'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY');
    return context.eddsa.findPda(programId, [
        (0, serializers_1.publicKey)().serialize(seeds.merkleTree),
    ]);
}
exports.findTreeConfigPda = findTreeConfigPda;
async function fetchTreeConfigFromSeeds(context, seeds, options) {
    return fetchTreeConfig(context, findTreeConfigPda(context, seeds), options);
}
exports.fetchTreeConfigFromSeeds = fetchTreeConfigFromSeeds;
async function safeFetchTreeConfigFromSeeds(context, seeds, options) {
    return safeFetchTreeConfig(context, findTreeConfigPda(context, seeds), options);
}
exports.safeFetchTreeConfigFromSeeds = safeFetchTreeConfigFromSeeds;
//# sourceMappingURL=treeConfig.js.map