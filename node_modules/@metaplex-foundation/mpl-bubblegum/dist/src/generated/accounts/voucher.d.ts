/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { LeafSchema, LeafSchemaArgs } from '../types';
export declare type Voucher = Account<VoucherAccountData>;
export declare type VoucherAccountData = {
    discriminator: Array<number>;
    leafSchema: LeafSchema;
    index: number;
    merkleTree: PublicKey;
};
export declare type VoucherAccountDataArgs = {
    leafSchema: LeafSchemaArgs;
    index: number;
    merkleTree: PublicKey;
};
export declare function getVoucherAccountDataSerializer(): Serializer<VoucherAccountDataArgs, VoucherAccountData>;
export declare function deserializeVoucher(rawAccount: RpcAccount): Voucher;
export declare function fetchVoucher(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<Voucher>;
export declare function safeFetchVoucher(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<Voucher | null>;
export declare function fetchAllVoucher(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<Voucher[]>;
export declare function safeFetchAllVoucher(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<Voucher[]>;
export declare function getVoucherGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<Voucher, {
    discriminator: Array<number>;
    leafSchema: LeafSchemaArgs;
    index: number;
    merkleTree: PublicKey;
}>;
export declare function findVoucherPda(context: Pick<Context, 'eddsa' | 'programs'>, seeds: {
    merkleTree: PublicKey;
    nonce: number | bigint;
}): Pda;
export declare function fetchVoucherFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findVoucherPda>[1], options?: RpcGetAccountOptions): Promise<Voucher>;
export declare function safeFetchVoucherFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findVoucherPda>[1], options?: RpcGetAccountOptions): Promise<Voucher | null>;
