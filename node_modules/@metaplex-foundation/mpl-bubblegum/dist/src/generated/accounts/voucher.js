"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeFetchVoucherFromSeeds = exports.fetchVoucherFromSeeds = exports.findVoucherPda = exports.getVoucherGpaBuilder = exports.safeFetchAllVoucher = exports.fetchAllVoucher = exports.safeFetchVoucher = exports.fetchVoucher = exports.deserializeVoucher = exports.getVoucherAccountDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const types_1 = require("../types");
function getVoucherAccountDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['leafSchema', (0, types_1.getLeafSchemaSerializer)()],
        ['index', (0, serializers_1.u32)()],
        ['merkleTree', (0, serializers_1.publicKey)()],
    ], { description: 'VoucherAccountData' }), (value) => ({
        ...value,
        discriminator: [191, 204, 149, 234, 213, 165, 13, 65],
    }));
}
exports.getVoucherAccountDataSerializer = getVoucherAccountDataSerializer;
function deserializeVoucher(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getVoucherAccountDataSerializer());
}
exports.deserializeVoucher = deserializeVoucher;
async function fetchVoucher(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'Voucher');
    return deserializeVoucher(maybeAccount);
}
exports.fetchVoucher = fetchVoucher;
async function safeFetchVoucher(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeVoucher(maybeAccount) : null;
}
exports.safeFetchVoucher = safeFetchVoucher;
async function fetchAllVoucher(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'Voucher');
        return deserializeVoucher(maybeAccount);
    });
}
exports.fetchAllVoucher = fetchAllVoucher;
async function safeFetchAllVoucher(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeVoucher(maybeAccount));
}
exports.safeFetchAllVoucher = safeFetchAllVoucher;
function getVoucherGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplBubblegum', 'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        leafSchema: [8, (0, types_1.getLeafSchemaSerializer)()],
        index: [null, (0, serializers_1.u32)()],
        merkleTree: [null, (0, serializers_1.publicKey)()],
    })
        .deserializeUsing((account) => deserializeVoucher(account))
        .whereField('discriminator', [191, 204, 149, 234, 213, 165, 13, 65]);
}
exports.getVoucherGpaBuilder = getVoucherGpaBuilder;
function findVoucherPda(context, seeds) {
    const programId = context.programs.getPublicKey('mplBubblegum', 'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY');
    return context.eddsa.findPda(programId, [
        (0, serializers_1.string)({ size: 'variable' }).serialize('voucher'),
        (0, serializers_1.publicKey)().serialize(seeds.merkleTree),
        (0, serializers_1.u64)().serialize(seeds.nonce),
    ]);
}
exports.findVoucherPda = findVoucherPda;
async function fetchVoucherFromSeeds(context, seeds, options) {
    return fetchVoucher(context, findVoucherPda(context, seeds), options);
}
exports.fetchVoucherFromSeeds = fetchVoucherFromSeeds;
async function safeFetchVoucherFromSeeds(context, seeds, options) {
    return safeFetchVoucher(context, findVoucherPda(context, seeds), options);
}
exports.safeFetchVoucherFromSeeds = safeFetchVoucherFromSeeds;
//# sourceMappingURL=voucher.js.map