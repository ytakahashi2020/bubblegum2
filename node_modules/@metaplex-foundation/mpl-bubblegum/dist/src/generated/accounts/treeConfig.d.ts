/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { DecompressibleState, DecompressibleStateArgs, Version, VersionArgs } from '../types';
export declare type TreeConfig = Account<TreeConfigAccountData>;
export declare type TreeConfigAccountData = {
    discriminator: Array<number>;
    treeCreator: PublicKey;
    treeDelegate: PublicKey;
    totalMintCapacity: bigint;
    numMinted: bigint;
    isPublic: boolean;
    isDecompressible: DecompressibleState;
    version: Version;
};
export declare type TreeConfigAccountDataArgs = {
    treeCreator: PublicKey;
    treeDelegate: PublicKey;
    totalMintCapacity: number | bigint;
    numMinted: number | bigint;
    isPublic: boolean;
    isDecompressible: DecompressibleStateArgs;
    version: VersionArgs;
};
export declare function getTreeConfigAccountDataSerializer(): Serializer<TreeConfigAccountDataArgs, TreeConfigAccountData>;
export declare function deserializeTreeConfig(rawAccount: RpcAccount): TreeConfig;
export declare function fetchTreeConfig(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<TreeConfig>;
export declare function safeFetchTreeConfig(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<TreeConfig | null>;
export declare function fetchAllTreeConfig(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<TreeConfig[]>;
export declare function safeFetchAllTreeConfig(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<TreeConfig[]>;
export declare function getTreeConfigGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<TreeConfig, {
    discriminator: Array<number>;
    treeCreator: PublicKey;
    treeDelegate: PublicKey;
    totalMintCapacity: number | bigint;
    numMinted: number | bigint;
    isPublic: boolean;
    isDecompressible: DecompressibleStateArgs;
    version: VersionArgs;
}>;
export declare function getTreeConfigSize(): number;
export declare function findTreeConfigPda(context: Pick<Context, 'eddsa' | 'programs'>, seeds: {
    merkleTree: PublicKey;
}): Pda;
export declare function fetchTreeConfigFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findTreeConfigPda>[1], options?: RpcGetAccountOptions): Promise<TreeConfig>;
export declare function safeFetchTreeConfigFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findTreeConfigPda>[1], options?: RpcGetAccountOptions): Promise<TreeConfig | null>;
