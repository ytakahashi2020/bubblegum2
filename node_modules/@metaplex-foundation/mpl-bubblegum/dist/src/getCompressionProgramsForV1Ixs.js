"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCompressionProgramsForV1Ixs = void 0;
const spl_account_compression_1 = require("@metaplex-foundation/spl-account-compression");
const mpl_account_compression_1 = require("@metaplex-foundation/mpl-account-compression");
// Constants for known genesis blockhashes on Solana.
const SOLANA_MAINNET_GENESIS_HASH = '5eykt4UsFv8P8NJdTREpY1vzqKqZKvdpKuc147dw2N9d';
const SOLANA_DEVNET_GENESIS_HASH = 'EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG';
const SOLANA_TESTNET_GENESIS_HASH = '4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY';
async function getCompressionProgramsForV1Ixs(context) {
    const genesisHash = await context.rpc.call('getGenesisHash');
    // Determine if the genesis hash matches known clusters.
    const isSolanaCluster = [
        SOLANA_MAINNET_GENESIS_HASH,
        SOLANA_DEVNET_GENESIS_HASH,
        SOLANA_TESTNET_GENESIS_HASH,
    ].includes(genesisHash);
    // Return appropriate program IDs based on the cluster.
    if (isSolanaCluster) {
        return {
            logWrapper: spl_account_compression_1.SPL_NOOP_PROGRAM_ID,
            compressionProgram: spl_account_compression_1.SPL_ACCOUNT_COMPRESSION_PROGRAM_ID,
        };
    }
    return {
        logWrapper: mpl_account_compression_1.MPL_NOOP_PROGRAM_ID,
        compressionProgram: mpl_account_compression_1.MPL_ACCOUNT_COMPRESSION_PROGRAM_ID,
    };
}
exports.getCompressionProgramsForV1Ixs = getCompressionProgramsForV1Ixs;
//# sourceMappingURL=getCompressionProgramsForV1Ixs.js.map