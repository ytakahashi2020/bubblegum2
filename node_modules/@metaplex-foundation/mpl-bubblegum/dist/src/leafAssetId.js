"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseLeafFromMintV2Transaction = exports.parseLeafFromMintToCollectionV1Transaction = exports.parseLeafFromMintV1Transaction = exports.findLeafAssetIdPda = void 0;
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const generated_1 = require("./generated");
function findLeafAssetIdPda(context, seeds) {
    const programId = context.programs.getPublicKey('mplBubblegum', generated_1.MPL_BUBBLEGUM_PROGRAM_ID);
    return context.eddsa.findPda(programId, [
        (0, serializers_1.string)({ size: 'variable' }).serialize('asset'),
        (0, serializers_1.publicKey)().serialize(seeds.merkleTree),
        (0, serializers_1.u64)().serialize(seeds.leafIndex),
    ]);
}
exports.findLeafAssetIdPda = findLeafAssetIdPda;
async function parseLeafFromMintV1Transaction(context, signature) {
    const transaction = await context.rpc.getTransaction(signature);
    const innerInstructions = transaction?.meta.innerInstructions;
    if (innerInstructions) {
        const leaf = (0, generated_1.getLeafSchemaSerializer)().deserialize(innerInstructions[0].instructions[0].data.slice(8));
        return leaf[0];
    }
    throw new Error('Could not parse leaf from transaction');
}
exports.parseLeafFromMintV1Transaction = parseLeafFromMintV1Transaction;
async function parseLeafFromMintToCollectionV1Transaction(context, signature) {
    const transaction = await context.rpc.getTransaction(signature);
    const innerInstructions = transaction?.meta.innerInstructions;
    if (innerInstructions) {
        const leaf = (0, generated_1.getLeafSchemaSerializer)().deserialize(innerInstructions[0].instructions[0].data.slice(8));
        return leaf[0];
    }
    throw new Error('Could not parse leaf from transaction');
}
exports.parseLeafFromMintToCollectionV1Transaction = parseLeafFromMintToCollectionV1Transaction;
async function parseLeafFromMintV2Transaction(context, signature) {
    const transaction = await context.rpc.getTransaction(signature);
    if (!transaction) {
        throw new Error('Could not get transaction from signature');
    }
    const instruction = transaction.message.instructions[0];
    const collectionIndex = instruction.accountIndexes[7];
    const collection = transaction.message.accounts[collectionIndex];
    if (!collection) {
        throw new Error('Collection account at index 7 is missing');
    }
    const programId = context.programs.getPublicKey('mplBubblegum', generated_1.MPL_BUBBLEGUM_PROGRAM_ID);
    const instructionIndex = collection === programId ? 0 : 1;
    const { innerInstructions } = transaction.meta;
    if (innerInstructions) {
        const leaf = (0, generated_1.getLeafSchemaSerializer)().deserialize(innerInstructions[0].instructions[instructionIndex].data.slice(8));
        return leaf[0];
    }
    throw new Error('Could not parse leaf from transaction');
}
exports.parseLeafFromMintV2Transaction = parseLeafFromMintV2Transaction;
//# sourceMappingURL=leafAssetId.js.map