"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTreeV2 = exports.createTree = void 0;
/* eslint-disable no-bitwise */
const mpl_toolbox_1 = require("@metaplex-foundation/mpl-toolbox");
const umi_1 = require("@metaplex-foundation/umi");
const spl_account_compression_1 = require("@metaplex-foundation/spl-account-compression");
const mpl_account_compression_1 = require("@metaplex-foundation/mpl-account-compression");
const generated_1 = require("./generated");
const createTree = async (context, input) => {
    const space = input.merkleTreeSize ??
        (0, spl_account_compression_1.getMerkleTreeSize)(input.maxDepth, input.maxBufferSize, input.canopyDepth);
    const lamports = await context.rpc.getRent(space);
    const programId = input.compressionProgram
        ? (0, umi_1.publicKey)(input.compressionProgram)
        : context.programs.getPublicKey('splAccountCompression', spl_account_compression_1.SPL_ACCOUNT_COMPRESSION_PROGRAM_ID);
    return ((0, umi_1.transactionBuilder)()
        // Create the empty Merkle tree account.
        .add((0, mpl_toolbox_1.createAccount)(context, {
        payer: input.payer ?? context.payer,
        newAccount: input.merkleTree,
        lamports,
        space,
        programId,
    }))
        // Create the tree config.
        .add((0, generated_1.createTreeConfig)(context, {
        ...input,
        merkleTree: input.merkleTree.publicKey,
    })));
};
exports.createTree = createTree;
const createTreeV2 = async (context, input) => {
    const space = input.merkleTreeSize ??
        (0, spl_account_compression_1.getMerkleTreeSize)(input.maxDepth, input.maxBufferSize, input.canopyDepth);
    const lamports = await context.rpc.getRent(space);
    return ((0, umi_1.transactionBuilder)()
        // Create the empty Merkle tree account.
        .add((0, mpl_toolbox_1.createAccount)(context, {
        payer: input.payer ?? context.payer,
        newAccount: input.merkleTree,
        lamports,
        space,
        programId: context.programs.getPublicKey('mplAccountCompression', mpl_account_compression_1.MPL_ACCOUNT_COMPRESSION_PROGRAM_ID),
    }))
        // Create the tree config.
        .add((0, generated_1.createTreeConfigV2)(context, {
        ...input,
        merkleTree: input.merkleTree.publicKey,
    })));
};
exports.createTreeV2 = createTreeV2;
//# sourceMappingURL=createTree.js.map